generator client {
  provider = "prisma-client-js"
}

model Category {
  id            String        @id @default(uuid())
  name          String        @unique
  description   String?
  products      Product[]
  subcategories Subcategory[]
}

model Subcategory {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  products    Product[]
}

model Deal {
  id          String        @id @default(uuid())
  name        String
  description String?
  discount    Float
  startTime   DateTime
  endTime     DateTime
  products    ProductDeal[]
}

model ProductDeal {
  productId String
  dealId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  deal      Deal    @relation(fields: [dealId], references: [id], onDelete: Cascade)

  @@id([productId, dealId])
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String    @id @default(uuid())
  avatarUrl              String    @default("/DefaultAvatar.png")
  avatarLocalPath        String?
  username               String?   @unique
  email                  String?   @unique
  firstName              String?
  lastName               String?
  phoneNumber            String?
  password               String?
  role                   Role      @default(USER)
  isEmailVerified        Boolean   @default(false)
  verificationCode       String?
  verificationCodeExpiry DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  // Stripe customer linkage for faster payment intent creation
  stripeCustomerId       String?

  accounts         Account[]
  sessions         Session[]
  reviews          Review[]
  carts            Cart[]
  orders           Order[]
  wishlist         Wishlist[]
  addresses        Address[]
  paymentMethods   PaymentMethod[]

  @@index([username])
}

model Cart {
  id     String     @id @default(uuid())
  userId String
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  CartItem[]
}

model CartItem {
  id        String @id @default(uuid())
  cartId    String
  productId String
  quantity  Int    @default(1)

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id                String       @id @default(uuid())
  userId            String
  orderNumber       String       @unique
  status            OrderStatus  @default(PENDING)
  paymentStatus     PaymentStatus @default(PENDING)
  shippingStatus    ShippingStatus @default(NOT_SHIPPED)
  
  // Order amounts
  subtotal          Float
  shippingCost      Float        @default(0)
  taxAmount         Float        @default(0)
  discountAmount    Float        @default(0)
  totalAmount       Float
  
  // Shipping information
  shippingAddressId String?
  billingAddressId  String?
  
  // Payment information
  paymentMethodId   String?
  stripePaymentIntentId String?
  
  // Order notes and tracking
  customerNotes     String?
  adminNotes        String?
  trackingNumber    String?
  
  // Timestamps
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  shippedAt         DateTime?
  deliveredAt       DateTime?
  
  // Relations
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  items             OrderItem[]
  shippingAddress   Address?     @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress    Address?     @relation("OrderBillingAddress", fields: [billingAddressId], references: [id])
  paymentMethod     PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  
  @@index([userId])
  @@index([orderNumber])
  @@index([status])
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int    @default(1)
  price     Float  // Price at time of purchase
  discount  Float  @default(0) // Discount applied at time of purchase
  
  // Product details at time of purchase (for historical record)
  productName       String
  productImage      String
  productSize       String?
  productColor      String?

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Wishlist {
  id       String    @id @default(uuid())
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products Product[] @relation("WishlistProducts")
}

model Review {
  id        String   @id @default(uuid())
  rating    Int      @default(0) // Rating on a scale (e.g., 1-5)
  comment   String? // Optional review text
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Product {
  id                 String    @id @default(uuid())
  slug               String    @unique
  name               String
  categoryId         String?
  subcategoryId      String?
  arrivalDate        DateTime?
  isFeatured         Boolean   @default(false)
  mainImage          String
  description        String
  price              Float
  discount           Float
  discountedPrice    Float
  stock              Int       @default(0)
  sizes              String
  colors             String
  availabilityStatus String

  imageUrl  String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category     Category?     @relation(fields: [categoryId], references: [id])
  subcategory  Subcategory?  @relation(fields: [subcategoryId], references: [id])
  deals        ProductDeal[]
  reviews      Review[] // Relation: Products can have multiple reviews
  cartItems    CartItem[]
  orderItems   OrderItem[]
  wishlistedBy Wishlist[]    @relation("WishlistProducts")
}

// Address model for shipping and billing addresses
model Address {
  id           String    @id @default(uuid())
  userId       String
  type         AddressType @default(BOTH)
  isDefault    Boolean   @default(false)
  
  // Address fields
  fullName     String
  company      String?
  streetLine1  String
  streetLine2  String?
  city         String
  state        String
  zipCode      String
  country      String    @default("United States")
  phoneNumber  String?
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relations
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders      Order[] @relation("OrderShippingAddress")
  billingOrders       Order[] @relation("OrderBillingAddress")
  
  @@index([userId])
}

// Payment methods for users (for saved cards, etc.)
model PaymentMethod {
  id                String           @id @default(uuid())
  userId            String
  type              PaymentMethodType @default(CREDIT_CARD)
  isDefault         Boolean          @default(false)
  
  // Card information (encrypted/tokenized)
  stripePaymentMethodId String?     // Stripe payment method ID
  last4             String?         // Last 4 digits for display
  brand             String?         // visa, mastercard, etc.
  expiryMonth       Int?
  expiryYear        Int?
  
  // Billing information
  billingName       String
  billingEmail      String?
  
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Relations
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders            Order[]
  
  @@index([userId])
}

enum Role {
  USER
  ADMIN
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}

enum PaymentMethodType {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  STRIPE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum ShippingStatus {
  NOT_SHIPPED
  PREPARING
  SHIPPED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  DELIVERY_FAILED
  RETURNED
}
