generator client {
  provider = "prisma-client-js"
}

model Category {
  id            String        @id @default(uuid())
  name          String        @unique
  description   String?
  products      Product[]
  subcategories Subcategory[]
}

model Subcategory {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  products    Product[]
}

model Deal {
  id          String        @id @default(uuid())
  name        String
  description String?
  discount    Float
  startTime   DateTime
  endTime     DateTime
  products    ProductDeal[]
}

model ProductDeal {
  productId String
  dealId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  deal      Deal    @relation(fields: [dealId], references: [id], onDelete: Cascade)

  @@id([productId, dealId])
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                     String    @id @default(uuid())
  avatarUrl              String    @default("/DefaultAvatar.png")
  avatarLocalPath        String?
  username               String?   @unique
  email                  String?   @unique
  firstName              String?
  lastName               String?
  phoneNumber            String?
  password               String?
  role                   Role      @default(USER)
  isEmailVerified        Boolean   @default(false)
  verificationCode       String?
  verificationCodeExpiry DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  accounts Account[]
  reviews  Review[]
  carts    Cart[]
  orders   Order[]
  wishlist Wishlist[]

  @@index([username])
}

model Cart {
  id     String     @id @default(uuid())
  userId String
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  CartItem[]
}

model CartItem {
  id        String @id @default(uuid())
  cartId    String
  productId String
  quantity  Int    @default(1)

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id        String      @id @default(uuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     OrderItem[]
  total     Float
  status    String
  createdAt DateTime    @default(now())
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int    @default(1)

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Wishlist {
  id       String    @id @default(uuid())
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products Product[] @relation("WishlistProducts")
}

model Review {
  id        String   @id @default(uuid())
  rating    Int      @default(0) // Rating on a scale (e.g., 1-5)
  comment   String? // Optional review text
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Product {
  id                 String    @id @default(uuid())
  name               String
  categoryId         String?
  subcategoryId      String?
  arrivalDate        DateTime?
  isFeatured         Boolean   @default(false)
  mainImage          String
  description        String
  price              Float
  discount           Float
  discountedPrice    Float
  stock              Int       @default(0)
  sizes              String
  colors             String
  availabilityStatus String

  imageUrl  String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category     Category?     @relation(fields: [categoryId], references: [id])
  subcategory  Subcategory?  @relation(fields: [subcategoryId], references: [id])
  deals        ProductDeal[]
  reviews      Review[] // Relation: Products can have multiple reviews
  cartItems    CartItem[]
  orderItems   OrderItem[]
  wishlistedBy Wishlist[]    @relation("WishlistProducts")
}

enum Role {
  USER
  ADMIN
}
